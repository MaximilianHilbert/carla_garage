BATCH_SIZE: 512

IMAGE_SEQ_LEN: 1  # at least 1, because later in the baseline the action prediction error is calculated over the full list of images in the dataset
LIDAR_SEQ_LEN: 0
USE_COLOR_AUG: 0
AUGMENT: 0
NUMBER_IMAGES_SEQUENCE: 1  # Number of frames sent in sequence
SEQUENCE_STRIDE: 1  # Number of frames skipped when reading the data

AUGMENTATION: None  # The image augmentation applied on every input image
USE_NOISE_DATA: True  # If we use the noise data.
NO_SPEED_INPUT: True  # not input speed
MODEL_TYPE: "MLP"
NUMBER_PREVIOUS_ACTIONS: 3 # three past actions
NUMBER_FUTURE_ACTIONS: 0 # 0 means that just the current action is predicted by the baseline
EPOCHS: 300 # 3 is minimum due to poor implementation
######################################################### UNUSED DUMMY FOR GENERATING NAME; DELETE LATER#########################################
MODEL_TYPE: 'coil-icra' # The type of model. Defines which modules the model has.
MODEL_CONFIGURATION:  # Based on the MODEL_TYPE, we specify the structure
  perception:  # The module that process the image input, it ouput the number of classes
    res:
      name: 'resnet34'
      num_classes: 512
  measurements:  # The module the process the input float data, in this case speed_input
    fc:  # Easy to configure fully connected layer
      neurons: [128, 128] # Each position add a new layer with the specified number of neurons
      dropouts: [0.0, 0.0]
  join:  # The module that joins both the measurements and the perception
    fc:
      neurons: [512]
      dropouts: [0.0]
  speed_branch:  # The prediction branch speed branch
    fc:
      neurons: [256, 256]
      dropouts: [0.0, 0.5]
  branches:  # The output branches for the different possible directions ( Straight, Left, Right, None)
    number_of_branches: 4
    fc:
      neurons: [256, 256]
      dropouts: [0.0, 0.5]
PRE_TRAINED: True  # If the weights are started with imagenet.


