img_seq_len: 7  #watch out, this is equivalent to placing n+1 in the old baseline implementation. image_seq_len=1 meaning no historic information
use_color_aug: 0
augment: 0
number_previous_waypoints: 1 # number of previous actions to prediction current action
model_type: 'coil-policy' # the type of model. defines which modules the model has.
model_configuration:  # based on the model_type, we specify the structure
  memory_dim: 512
  perception:  # the module that process the image input, it ouput the number of classes
    res:
      name: 'resnet34'
      num_classes: 512
  measurements:  # the module the process the input float data, in this case speed_input
    fc:  # easy to configure fully connected layer
      neurons: [128, 128] # each position add a new layer with the specified number of neurons
      dropouts: [0.0, 0.0]
  join:  # the module that joins both the measurements and the perception
    fc:
      neurons: [512]
      dropouts: [0.0]
  speed_branch:  # the prediction branch speed branch
    fc:
      neurons: [256, 256]
      dropouts: [0.0, 0.5]
  branches:  # the output branches for the different possible directions 
    number_of_branches: 1
    fc:
      neurons: [256, 128]
      dropouts: [0.0, 0.5]

mem_extract_model_type: 'coil-memory' # the type of model. defines which modules the model has.
mem_extract_model_configuration:  # based on the model_type, we specify the structure
  perception:  # the module that process the image input, it ouput the number of classes
    res:
      name: 'resnet34'
      num_classes: 512
  speed_branch:  # the prediction branch speed branch
    fc:
      neurons: [256, 256]
      dropouts: [0.0, 0.5]
  branches:
    number_of_branches: 1
    fc:
      neurons: [256, 256]
      dropouts: [0.0, 0.5]

pre_trained: true  # if the weights are started with imagenet.
use_wp_gru: true
branch_loss_weight: [1,0]
speed_input: false
num_repetitions: 1
